using Moq;
using PredictionEngine;
namespace PredictionEngine.Tests;

public class PredictionEngineTest
{
    [SetUp]
    public void Setup()
    {
    }

    [TestCase("Helo","Helo")]
    public void ShouldCallUnigramWhenPartialWordIsGiven(String phrase, string lastWord)
    {
        //Arrange
        var mockAlgo = new Mock<ILanguageModelAlgo>();
        PredictionEngine predictionAgent = new PredictionEngine(mockAlgo.Object);

        //ACT
        String prediction = predictionAgent.Predict(phrase);
        //Assert
        mockAlgo.Verify(p => p.predictUsingMonogram(lastWord), Times.Once());
    }

    [TestCase("Hello ", " ")]
    public void ShouldCallBigramWhenWordEndsWithASpace(String phrase, string lastWord)
    {
        //Arrange
        var mockAlgo = new Mock<ILanguageModelAlgo>();
        PredictionEngine predictionAgent = new PredictionEngine(mockAlgo.Object);

        //ACT
        String prediction = predictionAgent.Predict(phrase);
        //Assert
        mockAlgo.Verify(p => p.predictUsingBigram(lastWord), Times.Once());
    }

    /*

        [Test]
    public void Ping_invokes_DoSomething()
    {
        // ARRANGE
        var mock = new Mock<ILanguageModelAlgo>();
        mock.Setup(p => p.predictUsingMonogram(It.IsAny<string>())).Returns("value");


        // ACT


        // ASSERT
        mock.Verify(p => p.predictUsingMonogram("PING"), Times.Once());
    }
    */
}
